services:
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: grandspectra-backend
    environment:
      APP_NAME: ${APP_NAME}
      APP_ENV: ${APP_ENV}
      APP_DEBUG: 'true'
      APP_KEY: ${APP_KEY}
      APP_URL: ${APP_URL}
      DB_CONNECTION: ${DB_CONNECTION}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_DATABASE: ${DB_DATABASE}
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}
      METRICS_DB_HOST: ${METRICS_DB_HOST}
      METRICS_DB_PORT: ${METRICS_DB_PORT}
      METRICS_DB_DATABASE: ${METRICS_DB_DATABASE}
      METRICS_DB_USERNAME: ${METRICS_DB_USERNAME}
      METRICS_DB_PASSWORD: ${METRICS_DB_PASSWORD}
      PULSE_DB_CONNECTION: ${PULSE_DB_CONNECTION}
      REDIS_CLIENT: ${REDIS_CLIENT}
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      REDIS_PORT: ${REDIS_PORT}
      TMDB_API_KEY: ${TMDB_API_KEY}
      MAIL_PASSWORD: ${MAIL_PASSWORD}
      MAIL_HOST: ${MAIL_HOST}
      MAIL_USERNAME: ${MAIL_USERNAME}
      MAIL_MAILER: ${MAIL_MAILER}
      MAIL_PORT: ${MAIL_PORT}
      MAIL_ENCRYPTION: ${MAIL_ENCRYPTION}
      MAIL_FROM_ADDRESS: ${MAIL_FROM_ADDRESS}
      MAIL_FROM_NAME: ${MAIL_FROM_NAME}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_BUCKET: ${AWS_BUCKET}
      AWS_ENDPOINT: ${AWS_ENDPOINT}
      AWS_USE_PATH_STYLE_ENDPOINT: ${AWS_USE_PATH_STYLE_ENDPOINT}
      AWS_URL: ${AWS_URL}
    networks:
      - gs-network
    pull_policy:
      build

  nginx:
    image: nginx:alpine
    container_name: grandspectra-nginx
    ports:
      - "9000:80"
    depends_on:
      - backend
      - frontend
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
    networks:
      - gs-network

  frontend:
    image: l3ktro/grandspectra:latest
    container_name: grandspectra-frontend
    environment:
      - API_URL=/api
    depends_on:
      - backend
    networks:
      - gs-network

  meilisearch:
    image: getmeili/meilisearch:latest
    container_name: grandspectra-meilisearch
    environment:
      MEILI_MASTER_KEY: ${MEILI_MASTER_KEY}
    ports:
      - "7700:7700"
    networks:
      - gs-network

networks:
  gs-network:
    driver: bridge
